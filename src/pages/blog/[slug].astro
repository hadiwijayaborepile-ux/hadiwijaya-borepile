---
import Layout from '../../layouts/Layout.astro';
import PageHero from '../../components/PageHero.astro';
import ShareButtons from '../../components/ShareButtons.astro';
import BacaJuga from '../../components/BacaJuga.astro';

// getStaticPaths remains the same as it correctly gathers all slugs
export async function getStaticPaths() {
  const POSTS_BASE = import.meta.env.WORDPRESS_GRAPHQL_ENDPOINT || import.meta.env.WORDPRESS_REST_ENDPOINT || null;
  const API_URL = import.meta.env.API_URL || null;
  if (!POSTS_BASE && !API_URL) return [];
  const perPage = 50;
  let page = 1;
  const slugs: string[] = [];
  while (true) {
    const url = POSTS_BASE ? `${POSTS_BASE}?per_page=${perPage}&page=${page}` : `${API_URL}/api/v2/blogs?limit=${perPage}&page=${page}`;
    try {
      const res = await fetch(url);
      if (!res.ok) break;
      const posts = await res.json();
      const items = Array.isArray(posts) ? posts : (posts.data || posts);
      if (!Array.isArray(items) || items.length === 0) break;
      items.forEach((p: any) => { if(p.slug) slugs.push(p.slug) });
      if (items.length < perPage) break;
      page += 1;
    } catch (err) {
      break;
    }
  }
  return slugs.map(s => ({ params: { slug: s } }));
}

const { slug } = Astro.params;
const POSTS_BASE = import.meta.env.WORDPRESS_GRAPHQL_ENDPOINT || import.meta.env.WORDPRESS_REST_ENDPOINT || null;
if (!POSTS_BASE) return Astro.redirect('/404');

let blogPost: any = null;
let allPostsData: any[] = [];

try {
  const API_URL = import.meta.env.API_URL || null;
  const singleUrl = `${POSTS_BASE}?slug=${slug}&_embed`;
  const listUrl = `${POSTS_BASE}?per_page=20&_embed`; // Fetch fewer posts for efficiency

  let singleRes: Response | { ok: boolean } = await fetch(singleUrl).catch(() => ({ ok: false }));
  let listRes: Response | { ok: boolean } = await fetch(listUrl).catch(() => ({ ok: false }));

  if ((!singleRes || !singleRes.ok) && API_URL) {
    singleRes = await fetch(`${API_URL}/api/v2/blogs/${slug}`).catch(() => ({ ok: false }));
  }
  if ((!listRes || !listRes.ok) && API_URL) {
    listRes = await fetch(`${API_URL}/api/v2/blogs?limit=20`).catch(() => ({ ok: false }));
  }

  if (!('ok' in singleRes) || !singleRes.ok) throw new Error('Single post fetch failed');
  const rawSingle = await (singleRes as Response).json();
  const singleJson = Array.isArray(rawSingle) ? rawSingle[0] : rawSingle;
  const listJson = ('ok' in listRes && listRes.ok) ? await (listRes as Response).json() : [];

  const normalizePost = (p: any) => {
    if (!p) return null;
    // Helper to safely extract rendered content
    const getRendered = (field: any) => (field && typeof field === 'object' && 'rendered' in field) ? field.rendered : field || '';
    // Helper to get featured image
    const getImage = (post: any) => post._embedded?.['wp:featuredmedia']?.[0]?.source_url || null;
    // Helper to strip HTML
    const stripHtml = (html: string) => html ? html.replace(/<[^>]*>?/gm, '') : '';

    return {
      title: getRendered(p.title),
      excerpt: stripHtml(getRendered(p.excerpt)),
      body: getRendered(p.content),
      date: p.date,
      slug: p.slug,
      url: `/blog/${p.slug}`,
      image: getImage(p)
    };
  };

  blogPost = normalizePost(singleJson);
  allPostsData = Array.isArray(listJson) ? listJson.map(normalizePost).filter(Boolean) : [];

} catch (error) {
  console.error('[Astro Page Error] Failed to fetch blog data:', error);
  return Astro.redirect('/404');
}

if (!blogPost) {
  console.error(`[Astro Page Error] No blog post found for slug: ${slug}`);
  return Astro.redirect('/404');
}

// --- Prepare Related Posts ---
const otherPosts = allPostsData.filter(p => p.slug !== slug);
const relatedPostsForSection = [...otherPosts].sort(() => 0.5 - Math.random()).slice(0, 4);

const { title, date, image, body, excerpt } = blogPost;
const pageTitle = `${title} | Blog Hadiwijaya`;
const pageDescription = excerpt.substring(0, 160);
---

<Layout title={pageTitle} description={pageDescription}>
  
  <PageHero 
    title={title} 
    subtitle={new Date(date).toLocaleDateString('id-ID', { day: 'numeric', month: 'long', year: 'numeric' })}
  />

  <section class="page-body">
    <div class="container">
      <article>
        {image && <img class="featured-image" src={image} alt={title} />}

        <ShareButtons title={title} />

        <!-- Display the full content without splitting -->
        <div class="prose max-w-none" set:html={body} />
        
      </article>
    </div>
  </section>

  <!-- "Baca Juga" Section -->
  {relatedPostsForSection.length > 0 && <BacaJuga relatedPosts={relatedPostsForSection} />}

</Layout>

<style is:inline>
  .page-body { padding: 4rem 0; background-color: white; }
  .container { max-width: 800px; margin: 0 auto; padding: 0 1.5rem; }
  .featured-image { 
    width: 100%; 
    height: auto; 
    max-height: 450px; 
    object-fit: cover; 
    border-radius: 12px; 
    /* Adjusted margin to give space after hero */
    margin-top: -2rem;
    margin-bottom: 2.5rem; 
    box-shadow: 0 15px 30px rgba(0,0,0,0.15);
    position: relative;
    z-index: 10;
  }
  .prose {
    font-size: 1.12rem;
    line-height: 1.8;
  }
  .prose img { 
    border-radius: 8px; 
    max-width: 100%;
    height: auto;
    margin: 2rem 0;
  }
  .prose h2, .prose h3 {
    margin-top: 3rem;
    margin-bottom: 1.5rem;
  }
  
  @media (max-width: 768px) {
    .featured-image {
      margin-top: -1.5rem;
      margin-bottom: 2rem;
    }
  }
</style>
