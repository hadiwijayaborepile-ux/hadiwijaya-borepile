---
// 1. Mendefinisikan tipe data untuk TypeScript
interface Project {
  title: string;
  description: string;
  image: string;
}

// 2. Data dinamis dengan tipe yang benar
const API_BASE_URL = import.meta.env.API_URL;
let projects: Project[] = []; // Tipe eksplisit untuk variabel

try {
  if (API_BASE_URL) {
    const apiUrl = `${API_BASE_URL}/api/v2/projects`;
    const response = await fetch(apiUrl, { cache: 'no-store' });

    if (response.ok) {
      const apiProjects: any[] = await response.json();
      if (Array.isArray(apiProjects)) {
        // 3. SECARA EKSPLISIT memberi tahu TypeScript bahwa .map() mengembalikan tipe Project
        projects = apiProjects.map((project: any): Project => ({
          title: project.title,
          description: `Lokasi: ${project.location}.`,
          image: `${API_BASE_URL}/storage/${project.picture_upload}`
        }));
      }
    } else {
      console.error(`[Projects] API request failed: ${response.status}.`);
    }
  }
} catch (error) {
  console.error("[Projects] Gagal fetch data: ", error);
}

const initialVisibleProjects = 3;
---

<section class="latest-projects">
  <div class="container">
    <h2 class="fade-in-on-scroll">Proyek Terbaru Kami</h2>

    <div id="project-container" class="project-container">
      <div class="project-grid stagger-children">
        {projects.map((project, index) => (
          <div class="project-card" data-index={index}>
            <a
              href={project.image}
              class="card-image-wrapper"
              data-fancybox="projects"
              data-caption={`<h3>${project.title}</h3><p>${project.description}</p>`}
            >
              <img src={project.image} alt={project.title} loading="lazy" />
            </a>
            <div class="card-content">
              <h3>{project.title}</h3>
              <p>{project.description}</p>
            </div>
          </div>
        ))}
      </div>
    </div>

    {projects.length > initialVisibleProjects && (
      <div class="cta-container fade-in-on-scroll">
        <button id="toggle-projects-btn" class="cta-button">
          {/* Teks tombol dikontrol oleh CSS */}
        </button>
      </div>
    )}
  </div>
</section>

<script is:inline>
  function initProjectToggle() {
    const toggleBtn = document.getElementById('toggle-projects-btn');
    const projectContainer = document.getElementById('project-container');

    if (toggleBtn && projectContainer) {
      if (window.projectToggleInitialized) return;
      window.projectToggleInitialized = true;

      toggleBtn.addEventListener('click', function() {
        projectContainer.classList.toggle('is-expanded');
      });
    }
  }

  document.addEventListener('DOMContentLoaded', initProjectToggle);
  document.addEventListener('astro:after-swap', initProjectToggle);
</script>

<style>
  /* CSS tidak berubah, sudah kuat dan andal */
  .latest-projects { background-color: var(--background-color); text-align: center; padding: 5rem 0; }
  .project-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 2rem; margin-top: 3rem; }
  .project-card { background: #fff; border-radius: 12px; overflow: hidden; box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08); text-align: left; display: flex; flex-direction: column; }
  .project-card:nth-child(n + 4) { display: none; }
  .project-container.is-expanded .project-card:nth-child(n + 4) { display: flex; }
  .card-image-wrapper { width: 100%; padding-top: 133.33%; position: relative; display: block; border-radius: 12px 12px 0 0; transition: transform 0.3s ease, box-shadow 0.3s ease; }
  .card-image-wrapper:hover { transform: translateY(-8px); box-shadow: 0 15px 30px rgba(0, 0, 0, 0.12); }
  .project-card img { position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; }
  .card-content { padding: 1.5rem; flex-grow: 1; }
  h3 { margin-top: 0; font-size: 1.25rem; color: var(--secondary-color); margin-bottom: 0.5rem; }
  p { font-size: 0.95rem; color: #666; line-height: 1.6; }
  .cta-container { margin-top: 3rem; text-align: center; }
  .cta-button { background-color: white; color: var(--primary-color); border: 2px solid var(--primary-color); padding: 0.8rem 2.5rem; font-size: 1rem; font-weight: 700; border-radius: 50px; cursor: pointer; transition: all 0.3s ease; text-decoration: none; }
  .cta-button:hover { background-color: var(--primary-color); color: white; transform: translateY(-3px); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15); }
  .cta-button::after { content: 'Lihat Lebih Banyak'; }
  .project-container.is-expanded + .cta-container .cta-button::after { content: 'Lihat Lebih Sedikit'; }

  @media (max-width: 768px) {
    .latest-projects { padding: 3rem 0; }
    .project-grid { grid-template-columns: 1fr; gap: 1.5rem; }
    h3 { font-size: 1.15rem; }
    p { font-size: 0.9rem; }
  }
</style>